<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
  <!--导入属性配置-->
  <!-- context 是逆向工程的主要配置信息 -->
  <!-- id：name -->
  <!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 -->

  <!-- 配置文件路径 -->
  <properties resource="custom-application.properties"/>
  <!--数据库驱动包路径 -->
  <classPathEntry location="${mybatis.jdbc.jar}"/>
  <context id="default" targetRuntime="MyBatis3">

    <!-- 生成的 Java 文件的编码 -->
    <property name="javaFileEncoding" value="UTF-8"/>

    <!-- optional，旨在创建class时，对注释进行控制 -->
    <commentGenerator>
      <property name="suppressDate" value="true"/>
      <property name="suppressAllComments" value="true"/>
    </commentGenerator>

    <!--jdbc的数据库连接 -->
    <!--<jdbcConnection
      driverClass="com.mysql.cj.jdbc.Driver"
      connectionURL="jdbc:mysql://127.0.0.1:3306/spring_boot_demo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=Asia/Shanghai&amp;nullCatalogMeansCurrent=true"
      userId="root"
      password="123456">
    </jdbcConnection>-->
    <!--数据库连接信息 -->
    <jdbcConnection driverClass="${spring.datasource.druid.driver-class-name}"
                    connectionURL="${spring.datasource.druid.url}"
                    userId="${spring.datasource.druid.username}"
                    password="${spring.datasource.druid.password}">
      <!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true-->
      <property name="nullCatalogMeansCurrent" value="true"/>
    </jdbcConnection>

    <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
    <javaTypeResolver>
      <property name="forceBigDecimals" value="false"/>
    </javaTypeResolver>

    <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
        targetPackage     指定生成的model生成所在的包名
        targetProject     指定在该项目下所在的路径
    -->
    <!--<javaModelGenerator targetPackage="com.mmall.pojo" targetProject=".\src\main\java">-->
    <javaModelGenerator targetPackage="com.xkcoding.orm.mybatis.entity" targetProject="./src/main/java">
      <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
      <property name="enableSubPackages" value="false"/>
      <!-- 是否对model添加 构造函数，如果为true则不会生成ResultMap -->
      <property name="constructorBased" value="false"/>
      <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
      <property name="trimStrings" value="true"/>
      <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
      <property name="immutable" value="false"/>
    </javaModelGenerator>

    <!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
    <!--<sqlMapGenerator targetPackage="mappers" targetProject=".\src\main\resources">-->
    <!--<sqlMapGenerator targetPackage="mybatis/mappers" targetProject="./src/main/resources">
      <property name="enableSubPackages" value="false"/>
    </sqlMapGenerator>-->
    <!-- 生成Mapper.xml文件 -->
    <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
      <!--<property name="enableSubPackages" value="false"/>-->
    </sqlMapGenerator>

    <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
    -->
    <!-- targetPackage：mapper接口dao生成的位置 -->
    <!--<javaClientGenerator type="XMLMAPPER" targetPackage="com.mmall.dao" targetProject=".\src\main\java">-->
<!--    <javaClientGenerator type="XMLMAPPER" targetPackage="com.xkcoding.orm.mybatis.mapper" targetProject="./src/main/java">
      &lt;!&ndash; enableSubPackages:是否让schema作为包的后缀 &ndash;&gt;
      &lt;!&ndash;<property name="enableSubPackages" value="false"/>&ndash;&gt;
    </javaClientGenerator>-->

    <!--生成的表-->
    <!--domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；-->
    <!--enableInsert（默认true）：指定是否生成insert语句；-->
    <!--enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；-->
    <!--enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；-->
    <!--enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；-->
    <!--enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；-->
    <!--enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；-->
    <!--enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；-->
    <!--enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；-->
    <table tableName="orm_user" domainObjectName="User"
           enableCountByExample="false"
           enableUpdateByExample="false"
           enableDeleteByExample="false"
           enableSelectByExample="false"
           selectByExampleQueryId="false">
    </table>

    <!-- geelynote mybatis插件的搭建 -->
  </context>
</generatorConfiguration>
